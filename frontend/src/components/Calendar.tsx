import React, { useState, useMemo } from 'react';
import { ChevronLeft, ChevronRight, Calendar as CalendarIcon, Download, Users, Clock, Loader } from 'lucide-react';
import type { Event } from '../services/eventService';
import { attendanceService } from '../services/attendanceService';
import { memberService } from '../services/memberService';

interface CalendarProps {
  events: Event[];
}

interface EventDetailsModalProps {
  event: Event | null;
  isOpen: boolean;
  onClose: () => void;
  onExportAttendance: (event: Event) => void;
  exportLoading: boolean;
}

const EventDetailsModal: React.FC<EventDetailsModalProps> = ({ 
  event, 
  isOpen, 
  onClose, 
  onExportAttendance, 
  exportLoading 
}) => {
  if (!isOpen || !event) return null;

  const eventTypeDisplay = event.eventType === 'sunday_service' ? 'Sunday Service' : 'Custom Event';
  const eventDate = new Date(event.date).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-2xl shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-blue-100 rounded-xl">
              <CalendarIcon className="h-6 w-6 text-blue-600" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">Event Details</h2>
              <p className="text-gray-500 text-sm">View event information and attendance</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
          >
            <span className="text-2xl text-gray-500">Ã—</span>
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-6">
          {/* Event Information */}
          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">{event.name}</h3>
              <p className="text-gray-600">{eventTypeDisplay}</p>
            </div>

            <div className="space-y-3">
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-xl">
                <Clock className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm font-medium text-gray-500">Date</p>
                  <p className="text-gray-900">{eventDate}</p>
                </div>
              </div>

              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-xl">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm font-medium text-gray-500">Event Type</p>
                  <p className="text-gray-900 capitalize">{eventTypeDisplay}</p>
                </div>
              </div>

              {event.autoGenerated && (
                <div className="flex items-center space-x-3 p-3 bg-blue-50 rounded-xl">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <div>
                    <p className="text-sm font-medium text-blue-700">Auto-generated Event</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Quick Actions */}
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
            <h4 className="font-medium text-blue-800 mb-2">Quick Actions</h4>
            <p className="text-sm text-blue-700 mb-3">
              Download the attendance report for this event in CSV format.
            </p>
            <button
              onClick={() => onExportAttendance(event)}
              disabled={exportLoading}
              className="w-full bg-blue-600 text-white px-4 py-3 rounded-xl hover:bg-blue-700 transition-colors flex items-center justify-center font-medium disabled:opacity-50"
            >
              {exportLoading ? (
                <Loader className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Download className="h-4 w-4 mr-2" />
              )}
              {exportLoading ? 'Exporting...' : 'Export Attendance Report'}
            </button>
          </div>
        </div>

        {/* Footer */}
        <div className="flex space-x-3 p-6 border-t border-gray-200">
          <button
            onClick={onClose}
            className="flex-1 bg-gray-600 text-white px-4 py-3 rounded-xl hover:bg-gray-700 transition-colors font-medium"
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

const Calendar: React.FC<CalendarProps> = ({ events }) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [exportLoading, setExportLoading] = useState(false);

  const calendarDays = useMemo(() => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    
    // First day of the month
    const firstDay = new Date(year, month, 1);
    // Last day of the month
    const lastDay = new Date(year, month + 1, 0);
    // Start from the first Sunday of the calendar view
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - startDate.getDay());
    
    // End at the last Saturday of the calendar view
    const endDate = new Date(lastDay);
    endDate.setDate(endDate.getDate() + (6 - endDate.getDay()));
    
    const days = [];
    const current = new Date(startDate);
    
    while (current <= endDate) {
      const date = new Date(current);
      const dayEvents = events.filter(event => {
        const eventDate = new Date(event.date);
        return eventDate.toDateString() === date.toDateString();
      });
      
      days.push({
        date: new Date(date),
        isCurrentMonth: date.getMonth() === month,
        isToday: date.toDateString() === new Date().toDateString(),
        events: dayEvents
      });
      
      current.setDate(current.getDate() + 1);
    }
    
    return days;
  }, [currentDate, events]);

  const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentDate(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + (direction === 'next' ? 1 : -1));
      return newDate;
    });
  };

  const handleEventClick = (event: Event) => {
    setSelectedEvent(event);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedEvent(null);
  };

  const handleExportAttendance = async (event: Event) => {
    try {
      setExportLoading(true);
      
      // Get attendance data for this event
      const attendanceResponse = await attendanceService.getEventAttendance(event.eventId);
      const attendanceData = attendanceResponse.attendance || [];

      // Get all members to include absent members in the report
      const membersResponse = await memberService.getMembers({ page: 1, limit: 1000 });
      const allMembers = membersResponse.members;

      // Create a map of present members for quick lookup
      const presentMembersMap = new Map();
      attendanceData.forEach(record => {
        if (record.attendance.status === 'present') {
          presentMembersMap.set(record.member.memberId, record);
        }
      });

      // Generate CSV content
      const headers = ['Name', 'Age Group', 'Gender', 'Residence', 'ID Number', 'Status', 'Marked At'];
      
      const csvRows = allMembers.map(member => {
        const attendanceRecord = presentMembersMap.get(member.memberId);
        const status = attendanceRecord ? 'Present' : 'Absent';
        const markedAt = attendanceRecord ? 
          new Date(attendanceRecord.attendance.markedAt).toLocaleString() : 'N/A';

        return [
          `"${member.name}"`,
          member.ageGroup,
          member.gender,
          `"${member.residence}"`,
          member.idNo || 'N/A',
          status,
          markedAt
        ];
      });

      const csvContent = [
        headers.join(','),
        ...csvRows.map(row => row.join(','))
      ].join('\n');

      // Create and download file
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `attendance-${event.name}-${event.date}.csv`.replace(/[^a-zA-Z0-9-_]/g, '_');
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      // Close modal after successful export
      handleCloseModal();

    } catch (error) {
      console.error('Failed to export attendance:', error);
      alert('Failed to export attendance report');
    } finally {
      setExportLoading(false);
    }
  };

  const monthYear = currentDate.toLocaleDateString('en-US', {
    month: 'long',
    year: 'numeric'
  });

  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  return (
    <>
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden">
        {/* Calendar Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <CalendarIcon className="h-6 w-6 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900">{monthYear}</h3>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => navigateMonth('prev')}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <ChevronLeft className="h-5 w-5 text-gray-600" />
            </button>
            <button
              onClick={() => setCurrentDate(new Date())}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors font-medium"
            >
              Today
            </button>
            <button
              onClick={() => navigateMonth('next')}
              className="p-2 hover:bg-gray-100 rounded-xl transition-colors"
            >
              <ChevronRight className="h-5 w-5 text-gray-600" />
            </button>
          </div>
        </div>

        {/* Calendar Grid */}
        <div className="p-6">
          {/* Day Headers */}
          <div className="grid grid-cols-7 gap-1 mb-4">
            {dayNames.map(day => (
              <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                {day}
              </div>
            ))}
          </div>

          {/* Calendar Days */}
          <div className="grid grid-cols-7 gap-1">
            {calendarDays.map((day, index) => (
              <div
                key={index}
                className={`min-h-24 p-2 border border-gray-200 rounded-xl ${
                  day.isCurrentMonth ? 'bg-white' : 'bg-gray-50'
                } ${day.isToday ? 'ring-2 ring-blue-500 ring-inset' : ''}`}
              >
                <div className="flex justify-between items-start mb-1">
                  <span
                    className={`text-sm font-medium ${
                      day.isToday
                        ? 'bg-blue-600 text-white rounded-full w-6 h-6 flex items-center justify-center'
                        : day.isCurrentMonth
                        ? 'text-gray-900'
                        : 'text-gray-400'
                    }`}
                  >
                    {day.date.getDate()}
                  </span>
                  {!day.isCurrentMonth && (
                    <span className="text-xs text-gray-400">
                      {day.date.toLocaleDateString('en-US', { month: 'short' })}
                    </span>
                  )}
                </div>

                {/* Events */}
                <div className="space-y-1 max-h-20 overflow-y-auto">
                  {day.events.map(event => (
                    <button
                      key={event.eventId}
                      onClick={() => handleEventClick(event)}
                      className={`w-full text-left text-xs p-1 rounded transition-colors ${
                        event.eventType === 'sunday_service'
                          ? 'bg-blue-100 text-blue-800 hover:bg-blue-200'
                          : 'bg-green-100 text-green-800 hover:bg-green-200'
                      }`}
                    >
                      <div className="font-medium truncate">{event.name}</div>
                      <div className="text-xs opacity-75">
                        {event.eventType === 'sunday_service' ? 'Service' : 'Event'}
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Event Details Modal */}
      <EventDetailsModal
        event={selectedEvent}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onExportAttendance={handleExportAttendance}
        exportLoading={exportLoading}
      />
    </>
  );
};

export default Calendar;